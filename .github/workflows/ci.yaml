name: "CI"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  show-github-context:
    timeout-minutes: 1
    runs-on: ubuntu-22.04
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    steps:
      - run: echo $GITHUB_CONTEXT
  test-postgres:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_S3_KEY_PREFIX: test/postgres/${{ github.run_number }}/
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: test
      PGPASSWORD: test
      PGDATABASE: test
    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
      - name: Install Docker Compose
        timeout-minutes: 1
        run: |
          sudo apt -qq install -y docker-compose
          docker-compose --version
      - name: Install Postgres Client
        timeout-minutes: 1
        run: |
          sudo apt -qq install -y postgresql-client
          psql --version
      - name: Install AWS CLI
        timeout-minutes: 1
        run: |
          sudo apt -qq install -y awscli
          aws --version
      - name: Start Containers
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          docker-compose up -d --build
          pg_isready -h localhost -p 5432 || sleep 5
          pg_isready -h localhost -p 5432
      - name: Insert Data
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          ./insert-data.sh
          ./select-data.sh > before.txt
      - name: Run Backup
        timeout-minutes: 1
        working-directory: test/postgres
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: docker-compose exec -T backup /backup.sh
      - name: Stop Containers
        timeout-minutes: 1
        working-directory: test/postgres
        run: docker-compose down --volumes
      - name: Extract Backup
        working-directory: test/postgres
        run: |
          aws s3 cp s3://$AWS_S3_BUCKET . --recursive --exclude "*" --include "$AWS_S3_KEY_PREFIX*"
          export BACKUP_FNAME=$(find . -name '*.tar.gz' | grep $AWS_S3_KEY_PREFIX | tail -n1)
          tar xvf $BACKUP_FNAME
      - name: Restore Backup
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          docker volume create test_postgresql_data
          docker run --rm -v $PWD/backup/test_postgresql_data:/backup -v test_postgresql_data:/restore eeacms/rsync:2.4 rsync -avz /backup/ /restore/
      - name: Restart Containers
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          docker-compose up -d
          pg_isready -h localhost -p 5432 || sleep 5
          pg_isready -h localhost -p 5432
      - name: Validate Backup
        working-directory: test/postgres
        run: |
          ./select-data.sh > after.txt
          md5sum before.txt
          md5sum after.txt
