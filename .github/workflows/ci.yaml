name: "CI"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  test-postgres:
    name: E2E Postgres Test (${{ matrix.PLATFORM }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - PLATFORM: AWS S3
            AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
            AWS_S3_ENDPOINT_URL: AWS_S3_ENDPOINT_URL
            AWS_S3_BUCKET: AWS_S3_BUCKET
          - PLATFORM: Backblaze B2
            AWS_ACCESS_KEY_ID: BACKBLAZE_AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY: BACKBLAZE_AWS_SECRET_ACCESS_KEY
            AWS_S3_ENDPOINT_URL: BACKBLAZE_AWS_S3_ENDPOINT_URL
            AWS_S3_BUCKET: BACKBLAZE_AWS_S3_BUCKET
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets[matrix.AWS_ACCESS_KEY_ID] }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets[matrix.AWS_SECRET_ACCESS_KEY] }}
      AWS_S3_ENDPOINT_URL: ${{ secrets[matrix.AWS_S3_ENDPOINT_URL] }}
      AWS_S3_BUCKET: ${{ secrets[matrix.AWS_S3_BUCKET] }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_S3_KEY_PREFIX: test/postgres/${{ github.run_number }}/
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: test
      PGPASSWORD: test
      PGDATABASE: test
      ENCRYPTION_KEY: password${{ github.run_number }}
      # Default cron is set to never run, so we can start containers without running a backup.
      BACKUP_CRON_EXPRESSION: '0 0 30 2 *'
    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
      - name: Install gpg
        run: gpg --version
      - name: Install docker-compose
        uses: KengoTODA/actions-setup-docker-compose@main
        with:
          version: '2.14.1'
      - name: Install postgres client
        timeout-minutes: 1
        run: |
          sudo apt -qq install -y postgresql-client
          psql --version
      - name: Install AWS CLI
        timeout-minutes: 1
        working-directory: ${{ env.RUNNER_TEMP }}
        run: aws --version
      - name: Start containers
        timeout-minutes: 2
        working-directory: test/postgres
        run: docker compose up --build --wait --quiet-pull
      - name: Insert data
        timeout-minutes: 1
        working-directory: test/postgres
        run: ./insert-data.sh
      - name: Select data before backup
        timeout-minutes: 1
        working-directory: test/postgres
        run: ./select-data.sh > before-backup.txt
      - name: Restart with cron
        timeout-minutes: 1
        working-directory: test/postgres
        env:
          BACKUP_CRON_EXPRESSION: '* * * * *'
        run: |
          docker compose down
          docker compose up --wait
      # Poll the heartbeat container logs to determine when the backup has run.
      - name: Wait for heartbeat
        timeout-minutes: 2
        working-directory: test/postgres
        run: |
          while [ $? -ne 0 ]
          do
            sleep 1
            docker compose logs heartbeat-server | grep '/?heartbeat' | grep 200
          done
      - name: Copy backup from S3
        working-directory: test/postgres
        run: |
          aws s3 cp --endpoint-url=$AWS_S3_ENDPOINT_URL s3://$AWS_S3_BUCKET . --recursive --exclude "*" --include "$AWS_S3_KEY_PREFIX*"
          ls -la
      - name: Select data after backup
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          pg_isready -h localhost -p 5432 || sleep 10
          pg_isready -h localhost -p 5432
          ./select-data.sh > after-backup.txt
          cmp before-backup.txt after-backup.txt
      - name: Compare before backup and after backup
        working-directory: test/postgres
        run: |
          md5sum before-backup.txt after-backup.txt
          cmp before-backup.txt after-backup.txt
      - name: Decrypt backup
        working-directory: test/postgres
        run: |
          export BACKUP_FNAME=$(find . -name '*.tar.gz.gpg' | grep $AWS_S3_KEY_PREFIX | tail -n1)
          echo $BACKUP_FNAME
          gpg --batch --decrypt --passphrase $ENCRYPTION_KEY -o backup.tar.gz $BACKUP_FNAME
      - name: Extract backup
        working-directory: test/postgres
        run: |
          tar xzf backup.tar.gz
      - name: Restore backup
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          docker compose down
          docker volume rm test_postgresql_data
          docker volume create test_postgresql_data
          docker run --rm -v $PWD/backup/test_postgresql_data:/backup -v test_postgresql_data:/restore eeacms/rsync:2.4 rsync -az /backup/ /restore/
      - name: Restart containers
        timeout-minutes: 1
        working-directory: test/postgres
        run: docker compose up --wait
      - name: Compare before backup and after restore
        working-directory: test/postgres
        run: |
          ./select-data.sh > after-restore.txt
          md5sum before-backup.txt after-restore.txt
          cmp before-backup.txt after-restore.txt
      - name: Stop containers
        if: ${{ always() }}
        timeout-minutes: 1
        working-directory: test/postgres
        run: |
          docker compose logs
          docker compose down --volumes
  test-publish:
    name: Test publishing to Github container registry
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Docker Tag
        run: echo "TAG=pr-$(git show -s --format=%ct)" >> $GITHUB_ENV
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/bdv2s3:${{ env.TAG }}
